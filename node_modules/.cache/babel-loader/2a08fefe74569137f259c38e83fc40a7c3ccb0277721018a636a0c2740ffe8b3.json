{"ast":null,"code":"import React,{useState,useEffect,useRef,useCallback}from'react';import db from'../db/dexie';import'../styles/Home.css';import{Link}from'react-router-dom';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Home=()=>{const[results,setResults]=useState([]);const[query,setQuery]=useState('');// This controls the input query\nconst hasRunOnce=useRef(false);// ✅ 1. Populate results dynamically when query changes\nuseEffect(()=>{if(query.trim()===''){populateResults();// If query is empty, load all results\n}else{populateResults(query);}},[query]);// ✅ 2. Populate the database once on load\nuseEffect(()=>{if(hasRunOnce.current)return;hasRunOnce.current=true;checkAndPopulateDatabase();},[]);// Empty dependency array to ensure it runs only once\n// ✅ 3. **Adjust container on orientation change or window resize**\nuseEffect(()=>{const adjustContainerSize=()=>{const container=document.querySelector('.container');if(container){container.style.width=\"\".concat(window.innerWidth,\"px\");container.style.height=\"\".concat(window.innerHeight,\"px\");}};adjustContainerSize();window.addEventListener('resize',adjustContainerSize);window.addEventListener('orientationchange',adjustContainerSize);return()=>{window.removeEventListener('resize',adjustContainerSize);window.removeEventListener('orientationchange',adjustContainerSize);};},[]);// Function to check if the database is empty and populate it if needed\nconst checkAndPopulateDatabase=useCallback(async()=>{try{const recordsCount=await db.lyrics.count();if(recordsCount===0){var _data$data,_data$data$data;console.log('Database is empty, populating from JSON file...');const response=await fetch(\"\".concat(process.env.PUBLIC_URL,\"/scripts/db.json\"),{cache:'force-cache'});if(!response.ok){throw new Error(\"Failed to fetch db.json: \".concat(response.status,\" \").concat(response.statusText));}const data=await response.json();console.log('Full Data:',data);const table=data===null||data===void 0?void 0:(_data$data=data.data)===null||_data$data===void 0?void 0:(_data$data$data=_data$data.data)===null||_data$data$data===void 0?void 0:_data$data$data.find(table=>table.tableName==='lyrics');if(!table){throw new Error('Lyrics table not found in the JSON file.');}const lyricsData=table.rows;if(!lyricsData||!Array.isArray(lyricsData)||lyricsData.length===0){throw new Error('No data found in the lyrics table from the JSON file.');}await db.lyrics.bulkAdd(lyricsData);console.log('Database populated successfully with',lyricsData.length,'records.');}else{console.log('Database already populated with',recordsCount,'records.');}populateResults();}catch(error){console.error('Failed to populate the database:',error);}},[]);// **Updated function to populate results using the 'starts with' and 'contains' logic**\nconst populateResults=useCallback(async function(){let query=arguments.length>0&&arguments[0]!==undefined?arguments[0]:\"\";try{if(!query){const allResults=await db.lyrics.toArray();setResults(allResults.length>0?allResults:[{id:0,title:'Nessun risultato trovato'}]);return;}const normalizedQuery=query.toLowerCase();// **Step 1:** First, prioritize \"starts with\" matches\nconst startsWithResults=await db.lyrics.filter(record=>{const searchText=\"\".concat(record.title||'',\" \").concat(record.text||'',\" \").concat(record.notes||'',\" \").concat(record.category||'').toLowerCase();return searchText.startsWith(normalizedQuery);}).toArray();// **Step 2:** Then, add \"contains\" matches that don't start with the query\nconst containsResults=await db.lyrics.filter(record=>{const searchText=\"\".concat(record.title||'',\" \").concat(record.text||'',\" \").concat(record.notes||'',\" \").concat(record.category||'').toLowerCase();return searchText.includes(normalizedQuery)&&!searchText.startsWith(normalizedQuery);}).toArray();// Combine the two sets of results, ensuring no duplicates\nconst combinedResults=[...startsWithResults,...containsResults];if(combinedResults.length===0){setResults([{id:0,title:'Nessun risultato trovato'}]);}else{setResults(combinedResults);}}catch(error){console.error('Failed to populate the results:',error);}},[]);// **Handles input change in the search box**\nconst handleSearchInput=e=>{const query=e.target.value;// No trim() to allow for spaces\nsetQuery(query);// Update the query to trigger the `useEffect`\n};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"Canti & Lyrics\"}),/*#__PURE__*/_jsx(\"p\",{className:\"subtitle\",children:\"Lazzaro - S.Fiesole\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-group\",children:[/*#__PURE__*/_jsx(Link,{to:\"/db-admin\",className:\"button\",children:\"DB Admin\"}),/*#__PURE__*/_jsx(Link,{to:\"/aggiungi\",className:\"button\",children:\"Aggiungi\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"search-box\",children:/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"search-input\",placeholder:\"Ricerca\",className:\"search-input\",value:query,onChange:handleSearchInput})}),/*#__PURE__*/_jsx(\"div\",{className:\"results-box\",children:results.map(record=>/*#__PURE__*/_jsx(\"p\",{onClick:()=>window.location.href=\"/record/\".concat(record.id),children:record.title||'Titolo sconosciuto'},record.id))})]});};export default Home;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","db","Link","jsx","_jsx","jsxs","_jsxs","Home","results","setResults","query","setQuery","hasRunOnce","trim","populateResults","current","checkAndPopulateDatabase","adjustContainerSize","container","document","querySelector","style","width","concat","window","innerWidth","height","innerHeight","addEventListener","removeEventListener","recordsCount","lyrics","count","_data$data","_data$data$data","console","log","response","fetch","process","env","PUBLIC_URL","cache","ok","Error","status","statusText","data","json","table","find","tableName","lyricsData","rows","Array","isArray","length","bulkAdd","error","arguments","undefined","allResults","toArray","id","title","normalizedQuery","toLowerCase","startsWithResults","filter","record","searchText","text","notes","category","startsWith","containsResults","includes","combinedResults","handleSearchInput","e","target","value","className","children","to","type","placeholder","onChange","map","onClick","location","href"],"sources":["/workspaces/recanti/src/components/Home.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport db from '../db/dexie'; \nimport '../styles/Home.css'; \nimport { Link } from 'react-router-dom';\n\n\nconst Home = () => {\n  const [results, setResults] = useState([]);\n  const [query, setQuery] = useState(''); // This controls the input query\n  const hasRunOnce = useRef(false); \n\n  // ✅ 1. Populate results dynamically when query changes\n  useEffect(() => {\n    if (query.trim() === '') {\n      populateResults(); // If query is empty, load all results\n    } else {\n      populateResults(query);\n    }\n  }, [query]); \n\n  // ✅ 2. Populate the database once on load\n  useEffect(() => {\n    if (hasRunOnce.current) return; \n    hasRunOnce.current = true;\n    checkAndPopulateDatabase();\n  }, []); // Empty dependency array to ensure it runs only once\n\n  // ✅ 3. **Adjust container on orientation change or window resize**\n  useEffect(() => {\n    const adjustContainerSize = () => {\n      const container = document.querySelector('.container');\n      if (container) {\n        container.style.width = `${window.innerWidth}px`;\n        container.style.height = `${window.innerHeight}px`;\n      }\n    };\n\n    adjustContainerSize();\n\n    window.addEventListener('resize', adjustContainerSize);\n    window.addEventListener('orientationchange', adjustContainerSize);\n\n    return () => {\n      window.removeEventListener('resize', adjustContainerSize);\n      window.removeEventListener('orientationchange', adjustContainerSize);\n    };\n  }, []); \n\n  // Function to check if the database is empty and populate it if needed\n  const checkAndPopulateDatabase = useCallback(async () => {\n    try {\n      const recordsCount = await db.lyrics.count();\n      if (recordsCount === 0) {\n        console.log('Database is empty, populating from JSON file...');\n\n        const response = await fetch(`${process.env.PUBLIC_URL}/scripts/db.json`, { cache: 'force-cache' });\n        if (!response.ok) {\n          throw new Error(`Failed to fetch db.json: ${response.status} ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        console.log('Full Data:', data); \n        const table = data?.data?.data?.find(table => table.tableName === 'lyrics');\n        if (!table) {\n          throw new Error('Lyrics table not found in the JSON file.');\n        }\n\n        const lyricsData = table.rows;\n        if (!lyricsData || !Array.isArray(lyricsData) || lyricsData.length === 0) {\n          throw new Error('No data found in the lyrics table from the JSON file.');\n        }\n\n        await db.lyrics.bulkAdd(lyricsData);\n        console.log('Database populated successfully with', lyricsData.length, 'records.');\n      } else {\n        console.log('Database already populated with', recordsCount, 'records.');\n      }\n\n      populateResults(); \n\n    } catch (error) {\n      console.error('Failed to populate the database:', error);\n    }\n  }, []);\n\n  // **Updated function to populate results using the 'starts with' and 'contains' logic**\n  const populateResults = useCallback(async (query = \"\") => {\n    try {\n      if (!query) {\n        const allResults = await db.lyrics.toArray();\n        setResults(allResults.length > 0 ? allResults : [{ id: 0, title: 'Nessun risultato trovato' }]);\n        return;\n      }\n\n      const normalizedQuery = query.toLowerCase();\n\n      // **Step 1:** First, prioritize \"starts with\" matches\n      const startsWithResults = await db.lyrics.filter(record => {\n        const searchText = `${record.title || ''} ${record.text || ''} ${record.notes || ''} ${record.category || ''}`.toLowerCase();\n        return searchText.startsWith(normalizedQuery);\n      }).toArray();\n\n      // **Step 2:** Then, add \"contains\" matches that don't start with the query\n      const containsResults = await db.lyrics.filter(record => {\n        const searchText = `${record.title || ''} ${record.text || ''} ${record.notes || ''} ${record.category || ''}`.toLowerCase();\n        return searchText.includes(normalizedQuery) && !searchText.startsWith(normalizedQuery); \n      }).toArray();\n\n      // Combine the two sets of results, ensuring no duplicates\n      const combinedResults = [...startsWithResults, ...containsResults];\n\n      if (combinedResults.length === 0) {\n        setResults([{ id: 0, title: 'Nessun risultato trovato' }]);\n      } else {\n        setResults(combinedResults);\n      }\n    } catch (error) {\n      console.error('Failed to populate the results:', error);\n    }\n  }, []);\n\n  // **Handles input change in the search box**\n  const handleSearchInput = (e) => {\n    const query = e.target.value; // No trim() to allow for spaces\n    setQuery(query); // Update the query to trigger the `useEffect`\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Canti & Lyrics</h1>\n      <p className=\"subtitle\">Lazzaro - S.Fiesole</p>\n      <div className=\"button-group\">\n      <Link to=\"/db-admin\" className=\"button\">DB Admin</Link> \n      <Link to=\"/aggiungi\" className=\"button\">Aggiungi</Link> \n      </div>\n\n      <div className=\"search-box\">\n        <input \n          type=\"text\" \n          id=\"search-input\" \n          placeholder=\"Ricerca\" \n          className=\"search-input\" \n          value={query}\n          onChange={handleSearchInput} \n        />\n      </div>\n\n      <div className=\"results-box\">\n        {results.map(record => (\n          <p key={record.id} onClick={() => window.location.href = `/record/${record.id}`}>\n            {record.title || 'Titolo sconosciuto'}\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}